{"id":"socket.js","dependencies":[{"name":"/Users/ryan/dev/version_observer/assets/.babelrc","includedInParent":true,"mtime":1625839947895},{"name":"/Users/ryan/dev/version_observer/assets/package.json","includedInParent":true,"mtime":1625841574686},{"name":"phoenix","loc":{"line":9,"column":23},"parent":"/Users/ryan/dev/version_observer/assets/js/socket.js","resolved":"/Users/ryan/dev/version_observer/assets/node_modules/phoenix/priv/static/phoenix.js"}],"generated":{"js":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\n\nvar _phoenix = require(\"phoenix\");\n\n// NOTE: The contents of this file will only be executed if\n// you uncomment its entry in \"assets/js/app.js\".\n// To use Phoenix channels, the first step is to import Socket,\n// and connect at the socket path in \"lib/web/endpoint.ex\".\n//\n// Pass the token on params as below. Or remove it\n// from the params if you are not using authentication.\nvar socket = new _phoenix.Socket(\"/socket\", {\n  params: {\n    token: window.userToken\n  }\n}); // When you connect, you'll often need to authenticate the client.\n// For example, imagine you have an authentication plug, `MyAuth`,\n// which authenticates the session and assigns a `:current_user`.\n// If the current user exists you can assign the user's token in\n// the connection for use in the layout.\n//\n// In your \"lib/web/router.ex\":\n//\n//     pipeline :browser do\n//       ...\n//       plug MyAuth\n//       plug :put_user_token\n//     end\n//\n//     defp put_user_token(conn, _) do\n//       if current_user = conn.assigns[:current_user] do\n//         token = Phoenix.Token.sign(conn, \"user socket\", current_user.id)\n//         assign(conn, :user_token, token)\n//       else\n//         conn\n//       end\n//     end\n//\n// Now you need to pass this token to JavaScript. You can do so\n// inside a script tag in \"lib/web/templates/layout/app.html.eex\":\n//\n//     <script>window.userToken = \"<%= assigns[:user_token] %>\";</script>\n//\n// You will need to verify the user token in the \"connect/3\" function\n// in \"lib/web/channels/user_socket.ex\":\n//\n//     def connect(%{\"token\" => token}, socket, _connect_info) do\n//       # max_age: 1209600 is equivalent to two weeks in seconds\n//       case Phoenix.Token.verify(socket, \"user socket\", token, max_age: 1209600) do\n//         {:ok, user_id} ->\n//           {:ok, assign(socket, :user, user_id)}\n//         {:error, reason} ->\n//           :error\n//       end\n//     end\n//\n// Finally, connect to the socket:\n\nsocket.connect();\nvar _default = socket;\nexports.default = _default;"},"sourceMaps":{"js":{"mappings":[{"generated":{"line":8,"column":0},"source":"socket.js","original":{"line":9,"column":0}},{"generated":{"line":10,"column":0},"source":"socket.js","original":{"line":1,"column":0}},{"generated":{"line":11,"column":0},"source":"socket.js","original":{"line":2,"column":0}},{"generated":{"line":12,"column":0},"source":"socket.js","original":{"line":4,"column":0}},{"generated":{"line":13,"column":0},"source":"socket.js","original":{"line":5,"column":0}},{"generated":{"line":14,"column":0},"source":"socket.js","original":{"line":6,"column":0}},{"generated":{"line":15,"column":0},"source":"socket.js","original":{"line":7,"column":0}},{"generated":{"line":16,"column":0},"source":"socket.js","original":{"line":8,"column":0}},{"generated":{"line":17,"column":0},"source":"socket.js","original":{"line":11,"column":0}},{"name":"socket","generated":{"line":17,"column":4},"source":"socket.js","original":{"line":11,"column":4}},{"generated":{"line":17,"column":10},"source":"socket.js","original":{"line":11,"column":10}},{"generated":{"line":17,"column":13},"source":"socket.js","original":{"line":11,"column":13}},{"name":"Socket","generated":{"line":17,"column":17},"source":"socket.js","original":{"line":11,"column":17}},{"generated":{"line":17,"column":32},"source":"socket.js","original":{"line":11,"column":13}},{"generated":{"line":17,"column":33},"source":"socket.js","original":{"line":11,"column":24}},{"generated":{"line":17,"column":42},"source":"socket.js","original":{"line":11,"column":13}},{"generated":{"line":17,"column":44},"source":"socket.js","original":{"line":11,"column":35}},{"name":"params","generated":{"line":18,"column":0},"source":"socket.js","original":{"line":11,"column":37}},{"name":"params","generated":{"line":18,"column":2},"source":"socket.js","original":{"line":11,"column":37}},{"generated":{"line":18,"column":8},"source":"socket.js","original":{"line":11,"column":43}},{"generated":{"line":18,"column":10},"source":"socket.js","original":{"line":11,"column":45}},{"name":"token","generated":{"line":19,"column":0},"source":"socket.js","original":{"line":11,"column":47}},{"name":"token","generated":{"line":19,"column":4},"source":"socket.js","original":{"line":11,"column":47}},{"generated":{"line":19,"column":9},"source":"socket.js","original":{"line":11,"column":52}},{"name":"window","generated":{"line":19,"column":11},"source":"socket.js","original":{"line":11,"column":54}},{"generated":{"line":19,"column":17},"source":"socket.js","original":{"line":11,"column":60}},{"name":"userToken","generated":{"line":19,"column":18},"source":"socket.js","original":{"line":11,"column":61}},{"generated":{"line":20,"column":0},"source":"socket.js","original":{"line":11,"column":45}},{"generated":{"line":21,"column":0},"source":"socket.js","original":{"line":11,"column":35}},{"generated":{"line":21,"column":1},"source":"socket.js","original":{"line":11,"column":13}},{"generated":{"line":21,"column":2},"source":"socket.js","original":{"line":11,"column":0}},{"generated":{"line":21,"column":4},"source":"socket.js","original":{"line":13,"column":0}},{"generated":{"line":22,"column":0},"source":"socket.js","original":{"line":14,"column":0}},{"generated":{"line":23,"column":0},"source":"socket.js","original":{"line":15,"column":0}},{"generated":{"line":24,"column":0},"source":"socket.js","original":{"line":16,"column":0}},{"generated":{"line":25,"column":0},"source":"socket.js","original":{"line":17,"column":0}},{"generated":{"line":26,"column":0},"source":"socket.js","original":{"line":18,"column":0}},{"generated":{"line":27,"column":0},"source":"socket.js","original":{"line":19,"column":0}},{"generated":{"line":28,"column":0},"source":"socket.js","original":{"line":20,"column":0}},{"generated":{"line":29,"column":0},"source":"socket.js","original":{"line":21,"column":0}},{"generated":{"line":30,"column":0},"source":"socket.js","original":{"line":22,"column":0}},{"generated":{"line":31,"column":0},"source":"socket.js","original":{"line":23,"column":0}},{"generated":{"line":32,"column":0},"source":"socket.js","original":{"line":24,"column":0}},{"generated":{"line":33,"column":0},"source":"socket.js","original":{"line":25,"column":0}},{"generated":{"line":34,"column":0},"source":"socket.js","original":{"line":26,"column":0}},{"generated":{"line":35,"column":0},"source":"socket.js","original":{"line":27,"column":0}},{"generated":{"line":36,"column":0},"source":"socket.js","original":{"line":28,"column":0}},{"generated":{"line":37,"column":0},"source":"socket.js","original":{"line":29,"column":0}},{"generated":{"line":38,"column":0},"source":"socket.js","original":{"line":30,"column":0}},{"generated":{"line":39,"column":0},"source":"socket.js","original":{"line":31,"column":0}},{"generated":{"line":40,"column":0},"source":"socket.js","original":{"line":32,"column":0}},{"generated":{"line":41,"column":0},"source":"socket.js","original":{"line":33,"column":0}},{"generated":{"line":42,"column":0},"source":"socket.js","original":{"line":34,"column":0}},{"generated":{"line":43,"column":0},"source":"socket.js","original":{"line":35,"column":0}},{"generated":{"line":44,"column":0},"source":"socket.js","original":{"line":36,"column":0}},{"generated":{"line":45,"column":0},"source":"socket.js","original":{"line":37,"column":0}},{"generated":{"line":46,"column":0},"source":"socket.js","original":{"line":38,"column":0}},{"generated":{"line":47,"column":0},"source":"socket.js","original":{"line":39,"column":0}},{"generated":{"line":48,"column":0},"source":"socket.js","original":{"line":40,"column":0}},{"generated":{"line":49,"column":0},"source":"socket.js","original":{"line":41,"column":0}},{"generated":{"line":50,"column":0},"source":"socket.js","original":{"line":42,"column":0}},{"generated":{"line":51,"column":0},"source":"socket.js","original":{"line":43,"column":0}},{"generated":{"line":52,"column":0},"source":"socket.js","original":{"line":44,"column":0}},{"generated":{"line":53,"column":0},"source":"socket.js","original":{"line":45,"column":0}},{"generated":{"line":54,"column":0},"source":"socket.js","original":{"line":46,"column":0}},{"generated":{"line":55,"column":0},"source":"socket.js","original":{"line":47,"column":0}},{"generated":{"line":56,"column":0},"source":"socket.js","original":{"line":48,"column":0}},{"generated":{"line":57,"column":0},"source":"socket.js","original":{"line":49,"column":0}},{"generated":{"line":58,"column":0},"source":"socket.js","original":{"line":50,"column":0}},{"generated":{"line":59,"column":0},"source":"socket.js","original":{"line":51,"column":0}},{"generated":{"line":60,"column":0},"source":"socket.js","original":{"line":52,"column":0}},{"generated":{"line":61,"column":0},"source":"socket.js","original":{"line":53,"column":0}},{"generated":{"line":62,"column":0},"source":"socket.js","original":{"line":54,"column":0}},{"name":"socket","generated":{"line":64,"column":0},"source":"socket.js","original":{"line":55,"column":0}},{"generated":{"line":64,"column":6},"source":"socket.js","original":{"line":55,"column":6}},{"name":"connect","generated":{"line":64,"column":7},"source":"socket.js","original":{"line":55,"column":7}},{"generated":{"line":64,"column":14},"source":"socket.js","original":{"line":55,"column":0}},{"name":"socket","generated":{"line":65,"column":15},"source":"socket.js","original":{"line":57,"column":15}}],"sources":{"socket.js":"// NOTE: The contents of this file will only be executed if\n// you uncomment its entry in \"assets/js/app.js\".\n\n// To use Phoenix channels, the first step is to import Socket,\n// and connect at the socket path in \"lib/web/endpoint.ex\".\n//\n// Pass the token on params as below. Or remove it\n// from the params if you are not using authentication.\nimport { Socket } from \"phoenix\";\n\nlet socket = new Socket(\"/socket\", { params: { token: window.userToken } });\n\n// When you connect, you'll often need to authenticate the client.\n// For example, imagine you have an authentication plug, `MyAuth`,\n// which authenticates the session and assigns a `:current_user`.\n// If the current user exists you can assign the user's token in\n// the connection for use in the layout.\n//\n// In your \"lib/web/router.ex\":\n//\n//     pipeline :browser do\n//       ...\n//       plug MyAuth\n//       plug :put_user_token\n//     end\n//\n//     defp put_user_token(conn, _) do\n//       if current_user = conn.assigns[:current_user] do\n//         token = Phoenix.Token.sign(conn, \"user socket\", current_user.id)\n//         assign(conn, :user_token, token)\n//       else\n//         conn\n//       end\n//     end\n//\n// Now you need to pass this token to JavaScript. You can do so\n// inside a script tag in \"lib/web/templates/layout/app.html.eex\":\n//\n//     <script>window.userToken = \"<%= assigns[:user_token] %>\";</script>\n//\n// You will need to verify the user token in the \"connect/3\" function\n// in \"lib/web/channels/user_socket.ex\":\n//\n//     def connect(%{\"token\" => token}, socket, _connect_info) do\n//       # max_age: 1209600 is equivalent to two weeks in seconds\n//       case Phoenix.Token.verify(socket, \"user socket\", token, max_age: 1209600) do\n//         {:ok, user_id} ->\n//           {:ok, assign(socket, :user, user_id)}\n//         {:error, reason} ->\n//           :error\n//       end\n//     end\n//\n// Finally, connect to the socket:\nsocket.connect();\n\nexport default socket;\n"},"lineCount":null}},"error":null,"hash":"adc673f17dadcd0c112db0b557845f49","cacheData":{"env":{}}}